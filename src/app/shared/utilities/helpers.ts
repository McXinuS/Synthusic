/**
 * Class contains common helper methods.
 */
export class Utils {

  /**
   * Precision constant used in isFloatEqual function.
   */
  private static readonly FloatCompareEps = 0.01;

  /**
   * Compares two numbers with given esp and returns result of comparision.
   * @param {number} a The first number.
   * @param {number} b The second number.
   * @param {number} eps Precision of comparison.
   * @returns {boolean} True is numbers are equal, false otherwise.
   */
  public static isFloatEqual(a: number, b: number, eps: number = this.FloatCompareEps): boolean {
    return Math.abs(a - b) < eps;
  }

  /**
   * Author: https://gist.github.com/gordonbrander/2230317
   * Modified for Typescript
   * Generate unique IDs for use as pseudo-private/protected names.
   * Similar in concept to
   * <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
   * The goals of this function are twofold:
   * * Provide a way to generate a string guaranteed to be unique when compared
   *   to other strings generated by this function.
   * * Make the string complex enough that it is highly unlikely to be
   *   accidentally duplicated by hand (this is key if you're using `ID`
   *   as a private/protected name on an object).
   * Use:
   *     let privateName = CreateId();
   *     let o = { 'public': 'foo' };
   *     o[privateName] = 'bar';
   * @param {number} length
   * @returns {string}
   * @constructor
   */
  public static CreateId(length = 9): string {
    let from = 2;
    // Math.random should be unique because of its seeding algorithm.
    // Convert it to base 36 (numbers + letters), and grab the first 9 characters
    // after the decimal.
    return Math.random().toString(36).substr(from, length);
  }

}
